<?php
/**
 * Job
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  App\OpenAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OpenAPI Tutorial
 *
 * OpenAPI Tutorial by halhorn
 *
 * The version of the OpenAPI document: 0.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace App\OpenAPI\Model;

use \ArrayAccess;
use \App\OpenAPI\ObjectSerializer;

/**
 * Job Class Doc Comment
 *
 * @category Class
 * @description 仕事
 * @package  App\OpenAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Job implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'job';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'title' => 'string',
        'content' => 'string',
        'attention' => 'bool',
        'jobCategoryId' => 'int',
        'jobCategory' => '\App\OpenAPI\Model\JobCategory',
        'price' => 'int',
        'welfare' => 'string',
        'holiday' => 'string',
        'image' => 'string',
        'imageUrl' => 'string',
        'sortNo' => 'int',
        'createdAt' => '\DateTime',
        'updatedAt' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'title' => null,
        'content' => null,
        'attention' => null,
        'jobCategoryId' => null,
        'jobCategory' => null,
        'price' => null,
        'welfare' => null,
        'holiday' => null,
        'image' => null,
        'imageUrl' => null,
        'sortNo' => null,
        'createdAt' => 'date',
        'updatedAt' => 'date'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'title' => 'title',
        'content' => 'content',
        'attention' => 'attention',
        'jobCategoryId' => 'jobCategoryId',
        'jobCategory' => 'jobCategory',
        'price' => 'price',
        'welfare' => 'welfare',
        'holiday' => 'holiday',
        'image' => 'image',
        'imageUrl' => 'imageUrl',
        'sortNo' => 'sortNo',
        'createdAt' => 'createdAt',
        'updatedAt' => 'updatedAt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'title' => 'setTitle',
        'content' => 'setContent',
        'attention' => 'setAttention',
        'jobCategoryId' => 'setJobCategoryId',
        'jobCategory' => 'setJobCategory',
        'price' => 'setPrice',
        'welfare' => 'setWelfare',
        'holiday' => 'setHoliday',
        'image' => 'setImage',
        'imageUrl' => 'setImageUrl',
        'sortNo' => 'setSortNo',
        'createdAt' => 'setCreatedAt',
        'updatedAt' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'title' => 'getTitle',
        'content' => 'getContent',
        'attention' => 'getAttention',
        'jobCategoryId' => 'getJobCategoryId',
        'jobCategory' => 'getJobCategory',
        'price' => 'getPrice',
        'welfare' => 'getWelfare',
        'holiday' => 'getHoliday',
        'image' => 'getImage',
        'imageUrl' => 'getImageUrl',
        'sortNo' => 'getSortNo',
        'createdAt' => 'getCreatedAt',
        'updatedAt' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['title'] = $data['title'] ?? null;
        $this->container['content'] = $data['content'] ?? null;
        $this->container['attention'] = $data['attention'] ?? null;
        $this->container['jobCategoryId'] = $data['jobCategoryId'] ?? null;
        $this->container['jobCategory'] = $data['jobCategory'] ?? null;
        $this->container['price'] = $data['price'] ?? null;
        $this->container['welfare'] = $data['welfare'] ?? null;
        $this->container['holiday'] = $data['holiday'] ?? null;
        $this->container['image'] = $data['image'] ?? null;
        $this->container['imageUrl'] = $data['imageUrl'] ?? null;
        $this->container['sortNo'] = $data['sortNo'] ?? null;
        $this->container['createdAt'] = $data['createdAt'] ?? null;
        $this->container['updatedAt'] = $data['updatedAt'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['title'] === null) {
            $invalidProperties[] = "'title' can't be null";
        }
        if ($this->container['content'] === null) {
            $invalidProperties[] = "'content' can't be null";
        }
        if ($this->container['attention'] === null) {
            $invalidProperties[] = "'attention' can't be null";
        }
        if ($this->container['jobCategoryId'] === null) {
            $invalidProperties[] = "'jobCategoryId' can't be null";
        }
        if ($this->container['price'] === null) {
            $invalidProperties[] = "'price' can't be null";
        }
        if ($this->container['image'] === null) {
            $invalidProperties[] = "'image' can't be null";
        }
        if ($this->container['imageUrl'] === null) {
            $invalidProperties[] = "'imageUrl' can't be null";
        }
        if ($this->container['sortNo'] === null) {
            $invalidProperties[] = "'sortNo' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title タイトル
     *
     * @return self
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets content
     *
     * @return string
     */
    public function getContent()
    {
        return $this->container['content'];
    }

    /**
     * Sets content
     *
     * @param string $content 内容
     *
     * @return self
     */
    public function setContent($content)
    {
        $this->container['content'] = $content;

        return $this;
    }

    /**
     * Gets attention
     *
     * @return bool
     */
    public function getAttention()
    {
        return $this->container['attention'];
    }

    /**
     * Sets attention
     *
     * @param bool $attention 注目の求人
     *
     * @return self
     */
    public function setAttention($attention)
    {
        $this->container['attention'] = $attention;

        return $this;
    }

    /**
     * Gets jobCategoryId
     *
     * @return int
     */
    public function getJobCategoryId()
    {
        return $this->container['jobCategoryId'];
    }

    /**
     * Sets jobCategoryId
     *
     * @param int $jobCategoryId 職種id
     *
     * @return self
     */
    public function setJobCategoryId($jobCategoryId)
    {
        $this->container['jobCategoryId'] = $jobCategoryId;

        return $this;
    }

    /**
     * Gets jobCategory
     *
     * @return \App\OpenAPI\Model\JobCategory|null
     */
    public function getJobCategory()
    {
        return $this->container['jobCategory'];
    }

    /**
     * Sets jobCategory
     *
     * @param \App\OpenAPI\Model\JobCategory|null $jobCategory jobCategory
     *
     * @return self
     */
    public function setJobCategory($jobCategory)
    {
        $this->container['jobCategory'] = $jobCategory;

        return $this;
    }

    /**
     * Gets price
     *
     * @return int
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param int $price 金額
     *
     * @return self
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets welfare
     *
     * @return string|null
     */
    public function getWelfare()
    {
        return $this->container['welfare'];
    }

    /**
     * Sets welfare
     *
     * @param string|null $welfare 福利厚生
     *
     * @return self
     */
    public function setWelfare($welfare)
    {
        $this->container['welfare'] = $welfare;

        return $this;
    }

    /**
     * Gets holiday
     *
     * @return string|null
     */
    public function getHoliday()
    {
        return $this->container['holiday'];
    }

    /**
     * Sets holiday
     *
     * @param string|null $holiday 休日
     *
     * @return self
     */
    public function setHoliday($holiday)
    {
        $this->container['holiday'] = $holiday;

        return $this;
    }

    /**
     * Gets image
     *
     * @return string
     */
    public function getImage()
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     *
     * @param string $image 画像の内部識別子
     *
     * @return self
     */
    public function setImage($image)
    {
        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets imageUrl
     *
     * @return string
     */
    public function getImageUrl()
    {
        return $this->container['imageUrl'];
    }

    /**
     * Sets imageUrl
     *
     * @param string $imageUrl 画像URL
     *
     * @return self
     */
    public function setImageUrl($imageUrl)
    {
        $this->container['imageUrl'] = $imageUrl;

        return $this;
    }

    /**
     * Gets sortNo
     *
     * @return int
     */
    public function getSortNo()
    {
        return $this->container['sortNo'];
    }

    /**
     * Sets sortNo
     *
     * @param int $sortNo 並び順
     *
     * @return self
     */
    public function setSortNo($sortNo)
    {
        $this->container['sortNo'] = $sortNo;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param \DateTime|null $createdAt 作成日時
     *
     * @return self
     */
    public function setCreatedAt($createdAt)
    {
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets updatedAt
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updatedAt'];
    }

    /**
     * Sets updatedAt
     *
     * @param \DateTime|null $updatedAt 更新日時
     *
     * @return self
     */
    public function setUpdatedAt($updatedAt)
    {
        $this->container['updatedAt'] = $updatedAt;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


