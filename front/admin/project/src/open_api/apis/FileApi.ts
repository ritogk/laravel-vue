/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI Tutorial
 * OpenAPI Tutorial by halhorn
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    FilePath,
    FilePathFromJSON,
    FilePathToJSON,
} from '../models';

export interface FilesPostRequest {
    file: Blob;
}

/**
 * FileApi - interface
 * 
 * @export
 * @interface FileApiInterface
 */
export interface FileApiInterface {
    /**
     * 詳細内容
     * @summary ファイル 追加
     * @param {Blob} file ファイル
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApiInterface
     */
    filesPostRaw(requestParameters: FilesPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<FilePath>>;

    /**
     * 詳細内容
     * ファイル 追加
     */
    filesPost(requestParameters: FilesPostRequest, initOverrides?: RequestInit): Promise<FilePath>;

}

/**
 * 
 */
export class FileApi extends runtime.BaseAPI implements FileApiInterface {

    /**
     * 詳細内容
     * ファイル 追加
     */
    async filesPostRaw(requestParameters: FilesPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<FilePath>> {
        if (requestParameters.file === null || requestParameters.file === undefined) {
            throw new runtime.RequiredError('file','Required parameter requestParameters.file was null or undefined when calling filesPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAdmin", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.file !== undefined) {
            formParams.append('file', requestParameters.file as any);
        }

        const response = await this.request({
            path: `/files`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FilePathFromJSON(jsonValue));
    }

    /**
     * 詳細内容
     * ファイル 追加
     */
    async filesPost(requestParameters: FilesPostRequest, initOverrides?: RequestInit): Promise<FilePath> {
        const response = await this.filesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
