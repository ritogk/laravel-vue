/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI Tutorial
 * OpenAPI Tutorial by halhorn
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AccessToken,
    AccessTokenFromJSON,
    AccessTokenToJSON,
    RequestLogin,
    RequestLoginFromJSON,
    RequestLoginToJSON,
    User,
    UserFromJSON,
    UserToJSON,
} from '../models';

export interface AuthFrontLoginPostRequest {
    requestLogin?: RequestLogin;
}

export interface AuthFrontRefreshPostRequest {
    authorization?: string;
    requestLogin?: RequestLogin;
}

/**
 * AuthFrontApi - interface
 * 
 * @export
 * @interface AuthFrontApiInterface
 */
export interface AuthFrontApiInterface {
    /**
     * 詳細内容
     * @summary ログイン
     * @param {RequestLogin} [requestLogin] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthFrontApiInterface
     */
    authFrontLoginPostRaw(requestParameters: AuthFrontLoginPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AccessToken>>;

    /**
     * 詳細内容
     * ログイン
     */
    authFrontLoginPost(requestParameters: AuthFrontLoginPostRequest, initOverrides?: RequestInit): Promise<AccessToken>;

    /**
     * 会員
     * @summary ログアウト
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthFrontApiInterface
     */
    authFrontLogoutPostRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;

    /**
     * 会員
     * ログアウト
     */
    authFrontLogoutPost(initOverrides?: RequestInit): Promise<void>;

    /**
     * 詳細内容
     * @summary 自身の詳細
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthFrontApiInterface
     */
    authFrontMeGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<User>>;

    /**
     * 詳細内容
     * 自身の詳細
     */
    authFrontMeGet(initOverrides?: RequestInit): Promise<User>;

    /**
     * 詳細内容
     * @summary リフレッシュトークン認証
     * @param {string} [authorization] 
     * @param {RequestLogin} [requestLogin] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthFrontApiInterface
     */
    authFrontRefreshPostRaw(requestParameters: AuthFrontRefreshPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AccessToken>>;

    /**
     * 詳細内容
     * リフレッシュトークン認証
     */
    authFrontRefreshPost(requestParameters: AuthFrontRefreshPostRequest, initOverrides?: RequestInit): Promise<AccessToken>;

}

/**
 * 
 */
export class AuthFrontApi extends runtime.BaseAPI implements AuthFrontApiInterface {

    /**
     * 詳細内容
     * ログイン
     */
    async authFrontLoginPostRaw(requestParameters: AuthFrontLoginPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AccessToken>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/front/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestLoginToJSON(requestParameters.requestLogin),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccessTokenFromJSON(jsonValue));
    }

    /**
     * 詳細内容
     * ログイン
     */
    async authFrontLoginPost(requestParameters: AuthFrontLoginPostRequest, initOverrides?: RequestInit): Promise<AccessToken> {
        const response = await this.authFrontLoginPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 会員
     * ログアウト
     */
    async authFrontLogoutPostRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerFront", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/auth/front/logout`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 会員
     * ログアウト
     */
    async authFrontLogoutPost(initOverrides?: RequestInit): Promise<void> {
        await this.authFrontLogoutPostRaw(initOverrides);
    }

    /**
     * 詳細内容
     * 自身の詳細
     */
    async authFrontMeGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<User>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerFront", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/auth/front/me`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * 詳細内容
     * 自身の詳細
     */
    async authFrontMeGet(initOverrides?: RequestInit): Promise<User> {
        const response = await this.authFrontMeGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * 詳細内容
     * リフレッシュトークン認証
     */
    async authFrontRefreshPostRaw(requestParameters: AuthFrontRefreshPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AccessToken>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/auth/front/refresh`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestLoginToJSON(requestParameters.requestLogin),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccessTokenFromJSON(jsonValue));
    }

    /**
     * 詳細内容
     * リフレッシュトークン認証
     */
    async authFrontRefreshPost(requestParameters: AuthFrontRefreshPostRequest, initOverrides?: RequestInit): Promise<AccessToken> {
        const response = await this.authFrontRefreshPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
